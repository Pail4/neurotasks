# Инициализируем любым числом коэффициент крутизны наклона прямой
A = 0.4
A_vis = A # Запоминаем начальное значение крутизны наклона
# Вывод данных начальной прямой
print('Начальная прямая: ', A, '* X')

# Скорость обучения
lr = 0.001
# Зададим количество эпох
epochs = 3000

# Создадим массив входных данных x
arr_x = [1, 2, 3, 3.5, 4, 6, 7.5, 8.5, 9]
# Создадим массив целевых значений (ответы Y)
arr_y = [2.4, 4.5, 5.5, 6.4, 8.5, 11.7, 16.1, 16.5, 18.3]

# Прогон по выборке
for e in range(epochs):
    for i in range(len(arr_x)): # len(arr) - функция возвращает длину массива
        # Получить x координату точки
        x = arr_x[i]
        
        # Получить расчетную y, координату точки
        y = A * x 
        
        # Получить целевую Y, координату точки
        target_Y = arr_y[i]

        # Ошибка E = целевое значение - выход нейрона
        E = target_Y - y
 
        # Меняем коэффициент при x, в соответствии с правилом A+дельтаA = A
        A += lr*(E/x)

# Вывод данных готовой прямой
print('Готовая прямая: y = ', A, '* X')

import matplotlib.pyplot as plt
# %matplotlib inline

# Функция для отображения входных данных
def func_data(x_data):
    return [arr_y[i] for i in range(len(arr_y))]

# Функция для отображения начальной прямой
def func_begin(x_begin):
    return [A_vis*i for i in x_begin]

# Функция для отображения готовой прямой
def func(x):
    return [A*i for i in x]

# Значения по X входных данных 
x_data = arr_x

# Значения по X начальной прямой (диапазон значений) 
x_begin = [i for i in range(0, 11)]

# Значения по X готовой прямой (диапазон значений) 
x = [i for i in range(0, 11)]
#x = np.arange(0,11,1)

# Значения по Y входных данных
y_data = func_data(x_data)

# Значения по Y начальной прямой
y_begin = func_begin(x_begin)

# Значения по Y готовой прямой
y = func(x)

# Зададим имена графику и числовым координатам
plt.title("Neuron")
plt.xlabel("X")
plt.ylabel("Y")

# Зададим имена входным данным и прямым 
plt.plot(x,y, label='Входные данные', color = 'g') 
plt.plot(x,y, label='Готовая прямая', color = 'r')
plt.plot(x,y, label='Начальная прямая', color = 'b') 
plt.legend(loc=2) #loc - локация имени, 2 - справа в углу

# представляем точки данных (х,у) кружочками диаметра 10
plt.scatter(x_data, y_data, color ='g', s=10) 
# Начальная прямая
plt.plot(x_begin, y_begin, 'b')
# Готовая прямая
plt.plot(x, y, 'r') 
# Сетка на фоне для улучшения восприятия
plt.grid(True, linestyle='-', color='0.75')
# Показать график 

x = input("Введите значение ширины Х: ")
x = int(x)
T = input("Введите значение высоты Y: ")
T = int(T)
y = A * x 

# Условие
if T > y:
    print('Это жираф!')
else:
    print('Это крокодил!')
    
plt.show()